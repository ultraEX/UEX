.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH UEXD "1" "April 2018" "uexd 16d14cf" "User Commands"
.SH NAME
uexd  manual page for uexd 16d14cf
.SH DESCRIPTION
UEX Daemon version v1.0.1.016d14cf
.SS "Usage:"
.TP
uexd [options]
Start UEX Daemon
.SH OPTIONS
.HP
?
.IP
Print this help message and exit
.HP
\fBversion\fR
.IP
Print version and exit
.HP
\fBalertnotify=\fR<cmd>
.IP
Execute command when a relevant alert is received or we see a really
long fork (%s in cmd is replaced by message)
.HP
\fBassumevalid=\fR<hex>
.IP
If this block is in the chain assume that it and its ancestors are valid
and potentially skip their script verification (0 to verify all,
default:
00ad8b262524dfdf4135c57bc3307f1b55cce2f051dc243d2ad65b50501dbd41,
testnet:
00ad8b262524dfdf4135c57bc3307f1b55cce2f051dc243d2ad65b50501dbd41)
.HP
\fBblocknotify=\fR<cmd>
.IP
Execute command when the best block changes (%s in cmd is replaced by
block hash)
.HP
\fBblockreconstructionextratxn=\fR<n>
.IP
Extra transactions to keep in memory for compact block reconstructions
(default: 100)
.HP
\fBconf=\fR<file>
.IP
Specify configuration file. Relative paths will be prefixed by datadir
location. (default: bitcoin.conf)
.HP
\fBdaemon\fR
.IP
Run in the background as a daemon and accept commands
.HP
\fBdatadir=\fR<dir>
.IP
Specify data directory
.HP
\fBdbcache=\fR<n>
.IP
Set database cache size in megabytes (4 to 16384, default: 450)
.HP
\fBdebuglogfile=\fR<file>
.IP
Specify location of debug log file. Relative paths will be prefixed by a
netspecific datadir location. (default: debug.log)
.HP
\fBloadblock=\fR<file>
.IP
Imports blocks from external blk000??.dat file on startup
.HP
\fBmaxmempool=\fR<n>
.IP
Keep the transaction memory pool below <n> megabytes (default: 300)
.HP
\fBmaxorphantx=\fR<n>
.IP
Keep at most <n> unconnectable transactions in memory (default: 100)
.HP
\fBmempoolexpiry=\fR<n>
.IP
Do not keep transactions in the mempool longer than <n> hours (default:
336)
.HP
\fBpar=\fR<n>
.IP
Set the number of script verification threads (\fB8\fR to 16, 0 = auto, <0 =
leave that many cores free, default: 0)
.HP
\fBpersistmempool\fR
.IP
Whether to save the mempool on shutdown and load on restart (default: 1)
.HP
\fBpid=\fR<file>
.IP
Specify pid file. Relative paths will be prefixed by a netspecific
datadir location. (default: uexd.pid)
.HP
\fBprune=\fR<n>
.IP
Reduce storage requirements by enabling pruning (deleting) of old
blocks. This allows the pruneblockchain RPC to be called to
delete specific blocks, and enables automatic pruning of old
blocks if a target size in MiB is provided. This mode is
incompatible with \fBtxindex\fR and \fBrescan\fR. Warning: Reverting this
setting requires redownloading the entire blockchain. (default:
0 = disable pruning blocks, 1 = allow manual pruning via RPC,
>550 = automatically prune block files to stay under the
specified target size in MiB)
.HP
\fBreindex\fR
.IP
Rebuild chain state and block index from the blk*.dat files on disk
.HP
\fBreindexchainstate\fR
.IP
Rebuild chain state from the currently indexed blocks
.HP
\fBsysperms\fR
.IP
Create new files with system default permissions, instead of umask 077
(only effective with disabled wallet functionality)
.HP
\fBtxindex\fR
.IP
Maintain a full transaction index, used by the getrawtransaction rpc
call (default: 0)
.PP
Connection options:
.HP
\fBaddnode=\fR<ip>
.IP
Add a node to connect to and attempt to keep the connection open (see
the `addnode` RPC command help for more info)
.HP
\fBbanscore=\fR<n>
.IP
Threshold for disconnecting misbehaving peers (default: 100)
.HP
\fBbantime=\fR<n>
.IP
Number of seconds to keep misbehaving peers from reconnecting (default:
86400)
.HP
\fBbind=\fR<addr>
.IP
Bind to given address and always listen on it. Use [host]:port notation
for IPv6
.HP
\fBconnect=\fR<ip>
.IP
Connect only to the specified node(s); \fBconnect\fR=\fI\,0\/\fR disables automatic
connections (the rules for this peer are the same as for
\fBaddnode\fR)
.HP
\fBdiscover\fR
.IP
Discover own IP addresses (default: 1 when listening and no \fBexternalip\fR
or \fBproxy\fR)
.HP
\fBdns\fR
.IP
Allow DNS lookups for \fBaddnode\fR, \fBseednode\fR and \fBconnect\fR (default: 1)
.HP
\fBdnsseed\fR
.IP
Query for peer addresses via DNS lookup, if low on addresses (default: 1
unless \fBconnect\fR used)
.HP
\fBexternalip=\fR<ip>
.IP
Specify your own public address
.HP
\fBforcednsseed\fR
.IP
Always query for peer addresses via DNS lookup (default: 0)
.HP
\fBlisten\fR
.IP
Accept connections from outside (default: 1 if no \fBproxy\fR or \fBconnect\fR)
.HP
\fBlistenonion\fR
.IP
Automatically create Tor hidden service (default: 1)
.HP
\fBmaxconnections=\fR<n>
.IP
Maintain at most <n> connections to peers (default: 125)
.HP
\fBmaxreceivebuffer=\fR<n>
.IP
Maximum perconnection receive buffer, <n>*1000 bytes (default: 5000)
.HP
\fBmaxsendbuffer=\fR<n>
.IP
Maximum perconnection send buffer, <n>*1000 bytes (default: 1000)
.HP
\fBmaxtimeadjustment\fR
.IP
Maximum allowed median peer time offset adjustment. Local perspective of
time may be influenced by peers forward or backward by this
amount. (default: 4200 seconds)
.HP
\fBmaxuploadtarget=\fR<n>
.IP
Tries to keep outbound traffic under the given target (in MiB per 24h),
0 = no limit (default: 0)
.HP
\fBonion=\fR<ip:port>
.IP
Use separate SOCKS5 proxy to reach peers via Tor hidden services
(default: \fBproxy\fR)
.HP
\fBonlynet=\fR<net>
.IP
Only connect to nodes in network <net> (ipv4, ipv6 or onion)
.HP
\fBpeerbloomfilters\fR
.IP
Support filtering of blocks and transaction with bloom filters (default:
1)
.HP
\fBpermitbaremultisig\fR
.IP
Relay nonP2SH multisig (default: 1)
.HP
\fBport=\fR<port>
.IP
Listen for connections on <port> (default: 18888 or testnet: 28888)
.HP
\fBproxy=\fR<ip:port>
.IP
Connect through SOCKS5 proxy
.HP
\fBproxyrandomize\fR
.IP
Randomize credentials for every proxy connection. This enables Tor
stream isolation (default: 1)
.HP
\fBseednode=\fR<ip>
.IP
Connect to a node to retrieve peer addresses, and disconnect
.HP
\fBtimeout=\fR<n>
.IP
Specify connection timeout in milliseconds (minimum: 1, default: 5000)
.HP
\fBtorcontrol=\fR<ip>:<port>
.IP
Tor control port to use if onion listening enabled (default:
127.0.0.1:9051)
.HP
\fBtorpassword=\fR<pass>
.IP
Tor control port password (default: empty)
.HP
\fBupnp\fR
.IP
Use UPnP to map the listening port (default: 0)
.HP
\fBwhitebind=\fR<addr>
.IP
Bind to given address and whitelist peers connecting to it. Use
[host]:port notation for IPv6
.HP
\fBwhitelist=\fR<IP address or network>
.IP
Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or
CIDR notated network (e.g. 1.2.3.0/24). Can be specified multiple
times. Whitelisted peers cannot be DoS banned and their
transactions are always relayed, even if they are already in the
mempool, useful e.g. for a gateway
.PP
Wallet options:
.HP
\fBaddresstype\fR
.IP
What type of addresses to use ("legacy", "p2shsegwit", or "bech32",
default: "p2shsegwit")
.HP
\fBchangetype\fR
.IP
What type of change to use ("legacy", "p2shsegwit", or "bech32").
Default is same as \fBaddresstype\fR, except when
\fBaddresstype\fR=\fI\,p2shsegwit\/\fR a native segwit output is used when
sending to a native segwit address)
.HP
\fBdisablewallet\fR
.IP
Do not load the wallet and disable wallet RPC calls
.HP
\fBdiscardfee=\fR<amt>
.IP
The fee rate (in BTC/kB) that indicates your tolerance for discarding
change by adding it to the fee (default: 0.0001). Note: An output
is discarded if it is dust at this rate, but we will always
discard up to the dust relay fee and a discard fee above that is
limited by the fee estimate for the longest target
.HP
\fBfallbackfee=\fR<amt>
.IP
A fee rate (in BTC/kB) that will be used when fee estimation has
insufficient data (default: 0.0002)
.HP
\fBkeypool=\fR<n>
.IP
Set key pool size to <n> (default: 1000)
.HP
\fBmintxfee=\fR<amt>
.IP
Fees (in BTC/kB) smaller than this are considered zero fee for
transaction creation (default: 0.00001)
.HP
\fBpaytxfee=\fR<amt>
.IP
Fee (in BTC/kB) to add to transactions you send (default: 0.00)
.HP
\fBrescan\fR
.IP
Rescan the block chain for missing wallet transactions on startup
.HP
\fBsalvagewallet\fR
.IP
Attempt to recover private keys from a corrupt wallet on startup
.HP
\fBspendzeroconfchange\fR
.IP
Spend unconfirmed change when sending transactions (default: 1)
.HP
\fBtxconfirmtarget=\fR<n>
.IP
If paytxfee is not set, include enough fee so transactions begin
confirmation on average within n blocks (default: 6)
.HP
\fBupgradewallet\fR
.IP
Upgrade wallet to latest format on startup
.HP
\fBwallet=\fR<file>
.IP
Specify wallet file (within data directory) (default: wallet.dat)
.HP
\fBwalletbroadcast\fR
.IP
Make the wallet broadcast transactions (default: 1)
.HP
\fBwalletdir=\fR<dir>
.IP
Specify directory to hold wallets (default: <datadir>/wallets if it
exists, otherwise <datadir>)
.HP
\fBwalletnotify=\fR<cmd>
.IP
Execute command when a wallet transaction changes (%s in cmd is replaced
by TxID)
.HP
\fBwalletrbf\fR
.IP
Send transactions with fullRBF optin enabled (RPC only, default: 0)
.HP
\fBzapwallettxes=\fR<mode>
.IP
Delete all wallet transactions and only recover those parts of the
blockchain through \fBrescan\fR on startup (1 = keep tx meta data e.g.
account owner and payment request information, 2 = drop tx meta
data)
.PP
ZeroMQ notification options:
.HP
\fBzmqpubhashblock=\fR<address>
.IP
Enable publish hash block in <address>
.HP
\fBzmqpubhashtx=\fR<address>
.IP
Enable publish hash transaction in <address>
.HP
\fBzmqpubrawblock=\fR<address>
.IP
Enable publish raw block in <address>
.HP
\fBzmqpubrawtx=\fR<address>
.IP
Enable publish raw transaction in <address>
.PP
Debugging/Testing options:
.HP
\fBdebug=\fR<category>
.IP
Output debugging information (default: 0, supplying <category> is
optional). If <category> is not supplied or if <category> = 1,
output all debugging information. <category> can be: net, tor,
mempool, http, bench, zmq, db, rpc, estimatefee, addrman,
selectcoins, reindex, cmpctblock, rand, prune, proxy, mempoolrej,
libevent, coindb, qt, leveldb.
.HP
\fBdebugexclude=\fR<category>
.IP
Exclude debugging information for a category. Can be used in conjunction
with \fBdebug\fR=\fI\,1\/\fR to output debug logs for all categories except one
or more specified categories.
.HP
\fBhelpdebug\fR
.IP
Show all debugging options (usage: \fBhelp\fR \fBhelpdebug\fR)
.HP
\fBlogips\fR
.IP
Include IP addresses in debug output (default: 0)
.HP
\fBlogtimestamps\fR
.IP
Prepend debug output with timestamp (default: 1)
.HP
\fBmaxtxfee=\fR<amt>
.IP
Maximum total fees (in BTC) to use in a single wallet transaction or raw
transaction; setting this too low may abort large transactions
(default: 0.10)
.HP
\fBprinttoconsole\fR
.IP
Send trace/debug info to console instead of debug.log file
.HP
\fBshrinkdebugfile\fR
.IP
Shrink debug.log file on client startup (default: 1 when no \fBdebug\fR)
.HP
\fBuacomment=\fR<cmt>
.IP
Append comment to the user agent string
.PP
Chain selection options:
.HP
\fBtestnet\fR
.IP
Use the test chain
.PP
Node relay options:
.HP
\fBbytespersigop\fR
.IP
Equivalent bytes per sigop in transactions for relay and mining
(default: 20)
.HP
\fBdatacarrier\fR
.IP
Relay and mine data carrier transactions (default: 1)
.HP
\fBdatacarriersize\fR
.IP
Maximum size of data in data carrier transactions we relay and mine
(default: 83)
.HP
\fBmempoolreplacement\fR
.IP
Enable transaction replacement in the memory pool (default: 1)
.HP
\fBminrelaytxfee=\fR<amt>
.IP
Fees (in BTC/kB) smaller than this are considered zero fee for relaying,
mining and transaction creation (default: 0.00001)
.HP
\fBwhitelistforcerelay\fR
.IP
Force relay of transactions from whitelisted peers even if they violate
local relay policy (default: 1)
.HP
\fBwhitelistrelay\fR
.IP
Accept relayed transactions received from whitelisted peers even when
not relaying transactions (default: 1)
.PP
Block creation options:
.HP
\fBblockmaxweight=\fR<n>
.IP
Set maximum BIP141 block weight (default: 3996000)
.HP
\fBblockmintxfee=\fR<amt>
.IP
Set lowest fee rate (in BTC/kB) for transactions to be included in block
creation. (default: 0.00001)
.PP
RPC server options:
.HP
\fBrest\fR
.IP
Accept public REST requests (default: 0)
.HP
\fBrpcallowip=\fR<ip>
.IP
Allow JSONRPC connections from specified source. Valid for <ip> are a
single IP (e.g. 1.2.3.4), a network/netmask (e.g.
1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This
option can be specified multiple times
.HP
\fBrpcauth=\fR<userpw>
.IP
Username and hashed password for JSONRPC connections. The field
<userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A
canonical python script is included in share/rpcuser. The client
then connects normally using the
rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This
option can be specified multiple times
.HP
\fBrpcbind=\fR<addr>[:port]
.IP
Bind to given address to listen for JSONRPC connections. This option is
ignored unless \fBrpcallowip\fR is also passed. Port is optional and
overrides \fBrpcport\fR. Use [host]:port notation for IPv6. This
option can be specified multiple times (default: 127.0.0.1 and
::1 i.e., localhost, or if \fBrpcallowip\fR has been specified,
0.0.0.0 and :: i.e., all addresses)
.HP
\fBrpccookiefile=\fR<loc>
.IP
Location of the auth cookie. Relative paths will be prefixed by a
netspecific datadir location. (default: data dir)
.HP
\fBrpcpassword=\fR<pw>
.IP
Password for JSONRPC connections
.HP
\fBrpcport=\fR<port>
.IP
Listen for JSONRPC connections on <port> (default: 18889 or testnet:
28889)
.HP
\fBrpcserialversion\fR
.IP
Sets the serialization of raw transaction or block hex returned in
nonverbose mode, nonsegwit(0) or segwit(1) (default: 1)
.HP
\fBrpcthreads=\fR<n>
.IP
Set the number of threads to service RPC calls (default: 4)
.HP
\fBrpcuser=\fR<user>
.IP
Username for JSONRPC connections
.HP
\fBserver\fR
.IP
Accept command line and JSONRPC commands
.HP
\fBgen\fR
.IP
Generate coins (default: 0)
.HP
\fBgenproclimit=\fR<n>
.IP
Set the number of threads for coin generation if enabled (\fB1\fR = all
cores, default: 1)
.SH COPYRIGHT
Copyright (C) 2009-2018 The UEX developers
Copyright (C) 2009-2018 The Bitcoin Core developers

Please contribute if you find UEX useful. Visit <https://ultraEX.io> for
further information about the software.
The source code is available from <https://github.com/ultraEX/UEX>.

This is experimental software.
Distributed under the MIT software license, see the accompanying file COPYING
or <https://opensource.org/licenses/MIT>

This product includes software developed by the OpenSSL Project for use in the
OpenSSL Toolkit <https://www.openssl.org> and cryptographic software written by
Eric Young and UPnP software written by Thomas Bernard.
